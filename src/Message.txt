<ion-header translucent>
  <ion-toolbar>
    <ion-buttons slot="start">
      <ion-back-button defaultHref="menu/messagehome"></ion-back-button>
    </ion-buttons>
    <ion-title color="light" text-center>
      Chat
    </ion-title>
  </ion-toolbar>
</ion-header>

<ion-content fullscreen="true">
  <ion-grid>
    <ion-row class="chat" *ngFor="let item of messages">
      <ion-col class="message other-message" size="9" *ngIf="uid === item.userId">
            <b class="name">
              {{ item.name }}
            </b><br>
            <span>{{ item.text }}</span> 
            <div class="time" text-right><br> {{ item.date.seconds * 1000 | date: 'yyyy/MM/dd - h:mm' }}</div>
        </ion-col>
        <ion-col class="message my-message" offset="3" size="9" *ngIf="uid !== item.userId">
          <b class="name">
            {{ item.name }}
          </b><br>
          <span>{{ item.text }}</span>
          <div class="time" text-right><br> {{ item.date.seconds * 1000 | date: 'yyyy/MM/dd - h:mm' }}</div>
        </ion-col>
    </ion-row>
  </ion-grid>
  <ion-fab vertical="bottom" horizontal="end" slot="fixed">
    <ion-fab-button (click)="sendMessage()">
      <ion-icon name="send" expand="icon-only"></ion-icon>
    </ion-fab-button>
  </ion-fab>
</ion-content>

<ion-footer>
  <ion-toolbar>
    <ion-item>
      <ion-icon slot="start" name="camera" expand="icon-only" class="footerIcon"></ion-icon>
      <ion-input autosize maxrows="3" id="input-text" class="message-input" type="text" placeholder="Write a message..." [(ngModel)]="message.text"></ion-input>
      <ion-button slot="fixed" (click)="sendMessage()"></ion-button>
      <ion-icon name="send" expand="icon-only"></ion-icon>
    </ion-item>
  </ion-toolbar>
</ion-footer>




import { Component, OnInit, ViewChild } from '@angular/core';
import { MessageService, Message } from './../../services/message/message.service';
import { LoadingController, IonContent } from '@ionic/angular';
import { ActivatedRoute } from '@angular/router';
import { AngularFireAuth } from '@angular/fire/auth';



@Component({
  selector: 'app-message',
  templateUrl: './message.page.html',
  styleUrls: ['./message.page.scss'],
})
export class MessagePage implements OnInit {
  message: Message = {
    name: '',
    userId: '',
    text: '',
    date: new Date()
  }

  buddy: any;

  start_typing: any;

  messages: Message[]

  messageId: null;

  @ViewChild(IonContent, {static: false}) content: IonContent;
  
  constructor( private messageservice: MessageService, private loadingController: LoadingController, private route: ActivatedRoute,
     public afAuth: AngularFireAuth ) {
       
      }

  ngOnInit() {
  this.messageId = this.route.snapshot.params['id'];
  if (this.messageId){
    this.loadMessage();
  }
  this.messageservice.getMessages().subscribe(res =>{
    this.messages = res;
  });
  
}

async loadMessage(){
  const loading = await this.loadingController.create({
    message: 'Loading Message..'
  });
  await loading.present();

  this.messageservice.getMessage(this.messageId).subscribe(res => {
    loading.dismiss();
    this.message = res;
  });
}

  async sendMessage() {
    const entreredMessage = (<HTMLInputElement>document.getElementById("input-text")).value;
    this.message.date.getDate()
    this.message.userId = this.afAuth.auth.currentUser.uid
    this.message.name = this.afAuth.auth.currentUser.email
    if(entreredMessage.trim().length <= 0){
        this.presentAlert();
    }else{
    const loading = await this.loadingController.create({
      message: 'Sending Message..'
    });
    await loading.present();
    if (this.messageId){
      this.messageservice.updateMessage(this.message, this.messageId).then(() =>{
        loading.dismiss();
        //this.nav.back('home');
      });
    } else{
      this.messageservice.addMessage(this.message).then(() =>{
        loading.dismiss();
        //this.nav.back('home');
      });
    }
    this.confirmAlert();
    }
    this.message.text = '';
    this.content.scrollToBottom(200);
  }

  async confirmAlert() {
    const alert = document.createElement('ion-alert');
    alert.header = 'Success';
    alert.message = 'Message Sent';
    alert.buttons = ['OK'];

    document.body.appendChild(alert);
    return alert.present();
  }

  async presentAlert() {
    const alert = document.createElement('ion-alert');
    alert.header = 'Alert';
    alert.subHeader = 'Invalid inputs';
    alert.message = 'Message cannot be empty!';
    alert.buttons = ['OK'];

    document.body.appendChild(alert);
    return alert.present();
  }

   remove(item){
    this.messageservice.removeMessage(item.id);
  }




  /*checkUser(){
    var user = this.afAuth.auth.currentUser;
    this.afAuth.authState.subscribe(auth => {
        
      if (!auth) {
        console.log('Not connected');
      
    } else {
      console.log('Connected' + auth.uid);
      console.log(user.displayName);
      console.log(user.email);
      }
    });
  }*/
}